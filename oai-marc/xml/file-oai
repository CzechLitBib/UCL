#!/usr/bin/python3
#
# Update database from OAI-PMH 2.0
#

import argparse,rrdtool,sqlite3,locale,sys,io,re

from pymarc import MARCWriter,marcxml,Field,Record
from datetime import datetime,timedelta
from lxml.etree import tostring
from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry

OAI_URL='https://aleph.lib.cas.cz/OAI'
OAI_SET='UCLO'

# DEF -------------------

def valid_date(date):
	try:
		return datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
	except:
		raise argparse.ArgumentTypeError('Invalid date format.')

def MarcXML(xml):
	handler = marcxml.XmlHandler()
	marcxml.parse_xml(io.StringIO(tostring(xml).decode('utf-8')), handler)
	return handler.records[0]

def name_invert(s,ID):
	if len(s.split(',')) == 2:
		return s.split(',')[1].strip() + ' ' + s.split(',')[0].strip() 
	else:
		print(ID, '#Multiple comma.')
	return s

def name_to_upper(s,ID):
	if len(s.split(',')) == 2:
		return s.split(',')[0].strip().upper() + ', ' + s.split(',')[1].strip() 
	else:
		print(ID, '#Multiple comma.')
	return s

def word_to_upper(s):
	word,buff = '',''
	for char in s:
		if not word and re.match('\w', char, re.UNICODE):
			char = char.upper()
			word=True
		buff += char 
	return buff

def word_to_lower(s):
	word,buff = '',''
	for char in s:
		if not word and re.match('\w', char, re.UNICODE):
			char = char.lower()
			word=True
		buff += char 
	return buff

# ARGS -------------------

parser = argparse.ArgumentParser(description="OAI PMH 2.0 MARCXML Validator.")
parser.add_argument('--from', help='Records from. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='from_date')
parser.add_argument('--until', help='Records until. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='until_date')
args = parser.parse_args()

if not args.from_date: parser.error('argument --from is required.')
if not args.until_date: parser.error('argument --until is required.')

# OAI -------------------

registry = MetadataRegistry()
registry.registerReader('marc21', MarcXML)

oai = Client(OAI_URL, registry)

records = []

try:
	records = oai.listRecords(metadataPrefix='marc21', set=OAI_SET, from_=args.from_date, until=args.until_date)
except:
	records=[]

# MAIN -------------------

for record in records:

	header = record[0]
	metadata = record[1]

	# write / skip deleted records
	if header.isDeleted():
		continue

	# ident
	if '001' in metadata:
		ident = metadata['001'].value()
	else:
		continue

	# CLB / ECS / ECR filter
	for F in metadata.get_fields('599'):
		if 'a' in F and F['a'] == 'CLB-CPK': break
	else:
		for F in metadata.get_fields('964'):
			if 'a' in F and F['a'] in ['ECS', 'ECR']: break
		else:
			continue

	MATCH=False
	for F in metadata.get_fields('700'):
		if [sub for sub in F.get_subfields('4') if sub != 'aut']: MATCH=True	
	for F in metadata.get_fields('100'):
		if [sub for sub in F.get_subfields('4') if sub != 'aut']: MATCH=True	

	if MATCH:
		PASS=False
		if '245' in metadata and 'c' in metadata['245']:
			if '<<' in metadata['245']['c']: PASS=True
		for F in metadata.get_fields('505'):
			if 'r' in F and '<<' in F['r']: PASS=True
		if '594' in metadata: PASS=True
	
		if not PASS: print(ident)
 
# EXIT -------------------

sys.exit(0)

