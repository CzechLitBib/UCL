#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Aleph MARC 773 -> 856 convertor
#
# Texty
#                                              R     Y      C             S
# 002497899 7730  L $$tTexty$$x1804-977X$$gRoč. 22, 2018, č. 78, podzim, s. 2-3$$q22:78<2$$9201809-201811
#                                              R  Y   C S
# http://archiv.ucl.cas.cz/getpdf?path=Texty/2.1997/05.pdf
#    ID                  URL      
# XXXXXXXXX 85641 L $$ uYYY $$y Digitální archiv časopisů $$ 4 N
#

from __future__ import print_function

import StringIO,requests,sys,os,re

from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry
from pymarc import marcxml,Field,record_to_xml_node
import xml.etree.ElementTree as ET
from lxml.etree import tostring

# VAR ----------------------------------

IN='data.txt'
OUT='773to856.bib'
XML='773to856.xml'
LOG='773to856_TEXT.log'

PREFIX='http://archiv.ucl.cas.cz/getpdf?path=Texty/'
URL='https://aleph.lib.cas.cz/OAI'

TOTAL=0
MATCH=0
BROKEN=0
MAN=0

# DEF ----------------------------------

def MarcXML(xml):
	handler = marcxml.XmlHandler()
	marcxml.parse_xml(StringIO.StringIO(tostring(xml, encoding='utf-8')), handler)
	return handler.records[0]

def url_response(url,i,log):
	try:
		req = session.get(url)
		if req.status_code == 200:
			if len(req.content) > 0: # Check if valid PDF file
				if '\x25\x50\x44\x46' in req.content:
					return 1
	except:
		log.write(i + ' URL check failed.\n')

def write_record(bib,url,i,log):
	try:
		#oai:aleph22.lib.cas.cz:KNA01-001394011
		record,header,about='','',''
		header, record, about = oai.getRecord(metadataPrefix='marc21', identifier='oai:aleph22.lib.cas.cz:KNA01-' + i)
		if record:
			if '856' in record:
				log.write(i + ' Has 856.\n')
			else:
				# XXXXXXXXX 85641 L $$ uYYY $$y Digitální archiv časopisů $$ 4 N
				# ALEPH
				#bib.write(i + ' 85641 L $$u' + url + u'$$yDigitální archiv časopisů'.encode('utf-8') + '$$4N\n')
				# XML
				xml_file.write(ET.tostring(record_to_xml_node(record), encoding='utf-8'))
				# MARC
				field = Field(
					tag = '856',
					indicators = ['4','1'],
					subfields = ['u', url, 'y', u'Digitální archiv časopisů', '4', 'N']
				)
				record.add_ordered_field(field)
				bib.write(record.__str__())
				bib.write('\n')
		else:
			log.write(i + ' No record.\n')
	except:
		log.write(i + ' Write failed.\n')

def convert_q(q,g,i,out,log):
	R = re.sub('(\d+):\d+<\d+', '\\1', q).strip()
	C = re.sub('\d+:(\d+)<\d+', '\\1', q).strip()

	if R == '1996': R = '1'
	if R == '1997': R = '2'
	if R == '1998': R = '3'
	if R == '1999': R = '4'

	if R in [str(r) for r in range(1,13)]:
		if R == '12':
			R = '12.2007-2009'
		else:
			R = R + '.' + str(int(R) + 1995)

		URL = PREFIX + R + '/' + C + '.pdf'

		if url_response(URL,i,log):
			write_record(out,URL,i,log)
		else:
			log.write(i + ' BAD ' + URL + ' => ' + g)
	else:
		log.write(i + ' YEAR ' + g)

def convert_broken(g,i,out,log):
	R = re.sub('Roč\. (\d+), .*$', '\\1', g).strip()
	C = re.sub('Roč\. \d+, \d+, č\. (\d+), .*$', '\\1', g).strip()

	if R == '1996': R = '1'
	if R == '1997': R = '2'
	if R == '1998': R = '3'
	if R == '1999': R = '4'

	if R in [str(r) for r in range(1,13)]:
		if R == '12':
			R = '12.2007-2009'
		else:
			R = R + '.' + str(int(R) + 1995)

		URL = PREFIX + R + '/' + C + '.pdf'

		if url_response(URL,i,log):
			write_record(out,URL,i,log)
		else:
			log.write(i + ' BAD ' + URL + ' => ' + g)
	else:
		log.write(i + ' YEAR ' + g)


# INIT ----------------------------------

registry = MetadataRegistry()

registry.registerReader('marc21', MarcXML)

oai = Client(URL, registry)

session = requests.Session()

# MAIN ----------------------------------

in_file = open(IN, 'r')
out_file = open(OUT, 'a', 0)
xml_file = open(XML, 'a', 0)
log_file = open(LOG, 'w', 0)

for LINE in in_file:
	if re.match('.*L \$\$tTexty\$\$x1804-977X\$\$.*', LINE):
		TOTAL+=1
		ID = LINE[:9]
		G = re.sub('^.*\$\$g(.*)\$\$q.*$', '\\1', LINE)
		Q = re.sub('^.*\$\$q(.*)\$\$.*$', '\\1', LINE)
		#Q
		if re.match('\d+:\d+<\d+', Q):
			MATCH+=1
			convert_q(Q,G,ID,out_file,log_file)
			continue
		# BROKEN
		if re.match('Roč\. \d+, \d+, č\. \d+, (\S+|\S+ \S+),.*$', G, flags=re.UNICODE):
			BROKEN+=1
			convert_broken(G,ID,out_file,log_file)
			continue
		# MANUAL
		MAN+=1
		#print(LINE.strip())
		log_file.write(ID + ' MANUAL ' + G)

print('TOTAL: ' + str(TOTAL))
print('MATCH: ' + str(MATCH))
print('BROKEN: ' + str(BROKEN))
print('MAN: ' + str(MAN))

in_file.close()
out_file.close()
xml_file.close()
log_file.close()

