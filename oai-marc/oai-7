#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# OAI-PMH 2.0 MARCXML subfield '7' control.
#

# INCLUDE -------------------

from __future__ import print_function

import argparse,StringIO,sys,os,re

from datetime import datetime
from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry
from pymarc import marcxml
from lxml.etree import tostring

# VAR -------------------

URL='https://aleph.lib.cas.cz/OAI'
DATADIR='/var/www/html/7/raw/'
TAGFILE='/var/www/html/7/tag.txt'
INDEXFILE='/var/www/html/7/index.html'
TAGLIST=[]

INDEX_TOP='''<!doctype html>
<html>
<head><meta charset="utf-8"></head>
<body style="background-color:black;color:#6DAE42;">
<br>
<b><u>OAI-PMH 2.0 MARCXML</u></b>
<br><br><font size="3" color="white">Výstup kontroly podpole "7" záznamů MARCXML v databázi Aleph.</font>
<br><br><br>
<table border="1" cellpadding="8px" style="border-collapse:collapse;">
<tr>
<td width="30" bgcolor="#333333;" align="center"><font color="gold">Pole</font></td>
<td width="140" bgcolor="#333333;" align="center" colspan="3"><font color="gold">Podpole 7</font></td>
<td width="140" bgcolor="#333333;" align="center" colspan="3"><font color="gold">Bez podpole 7</font></td>
</tr>
'''
INDEX_BOTTOM='''</table>
<br><br>
<table border="0" cellpadding="4px" style="border-collapse:collapse;">
<tr>
<td align="right"><font color="gold">Podpole 7</font></td>
<td width="80" align="right"><font color="white">SEVEN_ALL</font></td>
<td width="80" align="right">SEVEN_PERCENT%</td>
</tr>
<tr>
<td align="right"><font color="gold">Bez podpole 7</font></td>
<td width="80" align="right"><font color="white">NO7_ALL</font></td>
<td width="80" align="right">NO7_PERCENT%</td>
</tr>
<tr>
<td align="right"><font color="gold">Celkem</font></td>
<td align="right"><font color="white">ALL</font></td>
</tr>
</table>
<br><a href="/" title="Back"><font size="3" color="white">[Domů]</font></a><br><br>
</body>
</html>
'''

RECORD=0
COUNTER=0
MATCH=0

# DEF -------------------

def MarcXML(xml):
	handler = marcxml.XmlHandler()
	marcxml.parse_xml(StringIO.StringIO(tostring(xml, encoding='utf-8')), handler)
	return handler.records[0]

def valid_date(s):
	try:
		return datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
	except:
		raise argparse.ArgumentTypeError('Invalid date format.')

def valid_display(s):
	if s in ('ident', 'marc'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid display format.')

def valid_request(s):
	if s in ('record', 'ident', 'set', 'meta'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid request format.')

# ARG -------------------

parser = argparse.ArgumentParser(description="OAI PMH 2.0 MARCXML Validator.")
listing = parser.add_argument_group('request')
listing.add_argument('--get', help='Request type. [record] [ident] [set] [meta]', type=valid_request, default='record')
required = parser.add_argument_group('validation')
required.add_argument('--set', help='Records set.')
required.add_argument('--from', help='Records from. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='from_date')
required.add_argument('--until', help='Records until. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='until_date')
optional = parser.add_argument_group('output')
optional.add_argument('--check', help='Validation control.', action='store_true')
args = parser.parse_args()

if args.get == 'record' or args.get == 'ident':
	if not args.set:
		parser.error('argument --set is required.')
	if not args.from_date:
		parser.error('argument --from is required.')
	if not args.until_date:
		parser.error('argument --until is required.')

if args.get == 'ident':
	if args.check or args.notify or args.export:
		parser.error('Invalid optional argument.')
	if args.display and args.display != 'ident':
		parser.error('Invalid display argument.')

# INIT -------------------

try:
	with open(TAGFILE, 'r', 0) as f: TAGLIST = f.read().splitlines()
except:	TAGLIST=[]

registry = MetadataRegistry()
registry.registerReader('marc21', MarcXML)

oai = Client(URL, registry)

try:
	if args.get == 'record':
		records = oai.listRecords(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'ident':
		records = oai.listIdentifiers(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'set':
		records = oai.listSets()
	if args.get == 'meta':
		records = oai.listMetadataFormats()
except:
	records=[]

# MAIN -------------------

for record in records:

	if args.get == 'set' or args.get == 'meta':
		print(record[0])
		COUNTER+=1
		continue

	if args.get == 'ident':
		if record.isDeleted(): continue
		COUNTER+=1
		continue

	header = record[0]
	metadata = record[1]

	# skip deleted records
	if header.isDeleted(): continue

	# retry missing metadata(?)
	if not metadata:
		print(header.identifier() + ' Missing matadata. Retrying..')
		retry = oai.getRecord(metadataPrefix='marc21', identifier=header.identifier())
		if not retry[1]:
			print(header.identifier() + ' Missing retry metadata.')
			continue
		else:
			header = retry[0]
			metadata = retry[1]

	# VALIDATION ------------------

	if args.check:
		
		# SKIP OLD ------------------

		if int(re.sub('^.*-(\d+)$', '\\1', header.identifier())) < 2350000: continue

		# SKIP BOT ------------------
		#
		#BOT=False
		#for F in metadata.get_fields('CAT','KAT')[-1:]:# last CAT/KAT
		#	if 'a' in F:
		#		if re.match('BATCH', F['a']): BOT=True
		#if BOT: continue
		#
		# 1xx/6xx-653/700/710/711/730 ------------------

		ALEPH = re.sub('^.*-(\d+)$', '\\1', header.identifier())

		for TAG, VALUE, SEVEN in [(f.tag, f.value().encode('utf-8'), f['7']) for f in metadata.fields]:
			if re.match('(1..|6..|700|710|711|730)', TAG):
				if TAG != '653':
					if TAG not in TAGLIST: TAGLIST.append(TAG)
					if not SEVEN and VALUE:
						try:
							# CSV
							with open(DATADIR + TAG + '.csv', 'a', 0) as f:
								f.write(VALUE + ';' + ALEPH + '\n')
							# HTML
							with open(DATADIR + TAG + '.txt', 'a', 0) as f:
								f.write(
									'<p><a style="color:#6DAE42;" target="_blank" href="https://aleph22.lib.cas.cz/F/?func=direct&doc_number=' +
									ALEPH +  '&local_base=AV">' + ALEPH + '</a>' +
									' <font color="white">' + VALUE + '</font></p>\n'
								)
						except: print(ALEPH + ' ' + TAG + ' Write failed.')
						MATCH+=1
					if SEVEN and VALUE:
						try:
							# CSV
							with open(DATADIR + TAG + '.7.csv', 'a', 0) as f:
								f.write(VALUE + ';' + ALEPH + '\n')
							# HTML
							with open(DATADIR + TAG + '.7.txt', 'a', 0) as f:
								f.write(
									'<p><a style="color:#6DAE42;" target="_blank" href="https://aleph22.lib.cas.cz/F/?func=direct&doc_number=' +
									ALEPH +  '&local_base=AV">' + ALEPH + '</a>' +
									' <font color="white">' + VALUE + '</font></p>\n'
								)
						except: print(ALEPH + ' ' + TAG + ' Write failed.')
					COUNTER+=1
		RECORD+=1

# UPDATE -------------------

# update tag list
with open(TAGFILE, 'w', 0) as f:
	for TAG in TAGLIST: f.write(TAG + '\n')
# write index
try:
	TAGLIST.sort()
	with open(INDEXFILE, 'w', 0) as f:
		f.write(INDEX_TOP)
		for TAG in TAGLIST:
			f.write('<tr>' + '\n')
			f.write('<td width="30" align="center"><font color="gold">' + TAG + '</font></td>' + '\n')
			f.write('<td width="60" align="center"><a href="data/' + TAG + '.7.html" style="text-decoration:none;color:white">HTML</a></td>' + '\n')
			f.write('<td width="40" align="center"><a href="data/' + TAG + '.7.csv" style="text-decoration:none;color:white">CSV</a></td>' + '\n')
			f.write('<td width="40" align="right">' + TAG + '_7_PERCENT%</td>' + '\n')
			f.write('<td width="60" align="center"><a href="data/' + TAG + '.html" style="text-decoration:none;color:white">HTML</a></td>' + '\n')
			f.write('<td width="40" align="center"><a href="data/' + TAG + '.csv" style="text-decoration:none;color:white">CSV</a></td>' + '\n')
			f.write('<td width="40" align="right">' + TAG +'_PERCENT%</td>' + '\n')
			f.write('</tr>' + '\n')
		f.write(INDEX_BOTTOM)
except: print('Index write error.')

# EXIT -------------------

print('TOTAL RECORD: ' + str(RECORD))
print('TOTAL    TAG: ' + str(COUNTER))
print('TATAL  MATCH: ' + str(MATCH))

