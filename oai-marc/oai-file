#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# OAI-PMH 2.0 MARCXML Record validator.
#

# INCLUDE -------------------

from __future__ import print_function

import argparse,StringIO,urllib2,smtplib,sys,os,re

from email.mime.text import MIMEText
from datetime import datetime
from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry
from pymarc import marcxml,Field
from pymarc.record import Record
from lxml.etree import tostring

# VAR -------------------

#DATA='demo.xml'
DATA='ucla.xml'

BUFF=''

def validate(record):

	global BUFF

	metadata = record
	IDENT = record['001'].value()

	if record.leader[7] == 'b':
		for F in metadata.get_fields('773'):
			if 't' in F and 'x' in F:
				if F['x'] == '0009-0468' and F['t'] == u'Česká literatura':
					BUFF+=str(IDENT) + chr(0x1F) + F.as_marc(encoding='utf-8') + '\n'
				#	print(F.as_marc(encoding='utf-8'))
					#for L in metadata.get_fields('856'):
					#	print(L.value().encode('utf-8'))
	# 600
 	#if len(metadata.get_fields('600')) == 1 and '7' not in metadata['600']:
	#	BIB=False
	#	for F in metadata.get_fields('655'):
	#		if 'a' in F and F['a'] in [
	#			u'biografické poznámky',
	#			u'bio-bibliografické poznámky',
	#			u'biograficko-bibliografické poznámky',
	#			u'bibliografické poznámky',
	#			u'nekrology',
	#		 	u'medailony'
	#		]: BIB=True
	#	if BIB:
	#		six.write(str(IDENT) + '\n')

	# CLO
	#if metadata.leader[7] == 'b':
	#	if '100' in metadata and '700' not in metadata:
	#		for F in metadata.get_fields('773'):
	#			if '9' in F and 't' in F:
	#				if '245' in metadata and 'c' in metadata['245']:
	#					if '100' in metadata and 'a' in metadata['100']:
	#						clo.write(
	#							metadata['100']['a'].encode('utf-8') + '||' +
	#							metadata['245']['c'].encode('utf-8') + '||' +
	#							F['9'][:4].encode('utf-8') + '||' +
	#							F['t'].encode('utf-8') + '||' +
	#							F.value().encode('utf-8') + '||' +
	#							str(IDENT) + '\n'
	#						)

	#if IDENT > 
	#	print("Time.")
	#sys.exit(1)

	#if 'SIF' in metadata:
	#	if 'a' in metadata['SIF']: SIF = metadata['SIF']['a'].encode('utf-8')
	#else:
	#	SIF = ''

	# CSV
	# SysNo SIF i a t n d b k h z x y 4

	#if COUNTER == 10000: sys.exit(1)

	#COUNTER+=1

	#for F in metadata.get_fields('787'):
	#	PAYLOAD=''
	#	PAYLOAD+=str(IDENT) + '|' + SIF
	#	for SUB in ('i', 'a', 't', 'n', 'd', 'b', 'k', 'h', 'z', 'x', 'y', '4'):
	#		if SUB in F:
	#			PAYLOAD+= '|' + '@'.join([s.encode('utf-8') for s in F.get_subfields(SUB)])
	#		else:
	#			PAYLOAD+='|'
	#	PAYLOAD+='\n'
	#	csv_787.write(PAYLOAD)
	#return
			
	#	VAL = re.sub('( +,| +;| +:)$','', VAL).strip().strip('[').strip(']')
	#	csv_260a.write(str(IDENT) + ';' + VAL.encode('utf-8') + '\n')
	#	for VAL in F.get_subfields('z'):
	#		VAL = re.sub('( ?,| ?;| ?:)$','', VAL).strip().strip('[').strip(']')
	#		csv_260b.write(str(IDENT) + ';' + VAL.encode('utf-8') + '\n')
	#	for F in metadata.get_fields('264'):
	#		for VAL in F.get_subfields('a'):
	#			VAL = re.sub('( +,| +;| +:)$','', VAL).strip().strip('[').strip(']')
	#			csv_264a.write(str(IDENT) + ';' + VAL.encode('utf-8') + '\n')
	#	for VAL in F.get_subfields('b'):
	#		VAL = re.sub('( ?,| ?;| ?:)$','', VAL).strip().strip('[').strip(']')
	#		csv_264b.write(str(IDENT) + ';' + VAL.encode('utf-8') + '\n')

	#	if 'SIF' in metadata:
	#		if 'a' in metadata['SIF']: SIF = metadata['SIF']['a'].encode('utf-8')
	#	else:
	#		SIF = ''

	#	if metadata.leader[7]  == 'b':
	#		for F in metadata.get_fields('773'):
	#			T,X,G,Q,N='','','','',''
	#			if 't' in F: T = F['t'].encode('utf-8')
	#			if 'x' in F: X = F['x'].encode('utf-8')
	#			if 'g' in F: G = F['g'].encode('utf-8')
	#			if 'q' in F: Q = F['q'].encode('utf-8')
	#			if '9' in F: N = F['9'].encode('utf-8')
	#			csv_773.write(str(IDENT) + '|' + SIF  + '|' + T + '|' + X  + '|' + G + '|' + Q + '|' + N + '\n')
	#	return

	#	if 'SIF' in metadata:
	#		if 'a' in metadata['SIF']: SIF = metadata['SIF']['a'].encode('utf-8')
	#	else
	#		SIF = ''

# MAIN -------------------

#record = Record()

#record.leader = '     nam a22     4i 4500'
#field = Field(tag = '001', data='002524717')
#record.add_ordered_field(field)
#field = Field(tag = '015', indicators = [' ',' '], subfields = ['a', 'cnb000000000'])
#record.add_ordered_field(field)

#validate(record)

marcxml.map_xml(validate, DATA)

with open('ceslit.bib','w') as ceslit:
	#for line in BUFF:
		ceslit.write(BUFF)

# EXIT -------------------

sys.exit(0)

