#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# OAI-PMH 2.0 MARCXML Record text collector.
#

# INCLUDE -------------------

from __future__ import print_function

import subprocess,argparse,StringIO,urllib2,smtplib,sys,os,re

from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime,date
from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry
from pymarc import marcxml,MARCReader
from lxml.etree import tostring

# VAR -------------------

URL='https://aleph.lib.cas.cz/OAI'
OUT='MDT.csv'

TOTAL=0
MDT_CNT=0
MDT_ERR=0
MDF_CNT=0
ERROR=0

# DEF -------------------

def get_mdt(val,mdt,tag,ident,SIF):
	global MDF_CNT
	ret=[]
	try:
		# create config, bin
		with open('z3950.cfg', 'w') as f:
			f.write('open tcp:aleph.nkp.cz:9991/AUT-UTF\n')
			f.write('set_marcdump rec.bin\n')
			f.write('find @attr 1=12 "' + mdt + '"\n')# sys. number http://aleph.nkp.cz/web/Z39_NK_cze.htm
			f.write('show 1\n')
			f.write('close\n')
			f.write('quit\n')
		# call client
		data = subprocess.check_output(['yaz-client', '-f', 'z3950.cfg'])
		# paprse output
		reader = MARCReader(open('rec.bin','rb'))
		for rec in reader:
			if tag == '650':
				if '150' in rec:
					if 'a' in rec['150']:
						if rec['150']['a'] != val:
							MDF_CNT+=1
							log.write(ident + ';650;' + SIF + ';179;Nesoulad pole 650a a AUT/150a ' + mdt + '.\n')
			if tag == '655':
				if '155' in rec:
					if 'a' in rec['155']:
						if rec['155']['a'] != val:
							MDF_CNT+=1
							log.write(ident + ';655;' + SIF + ';180;Nesoulad pole 655a a AUT/150a ' + mdt + '.\n')
			# get MDT list
			for f in metadata.get_fields('080','089'):
				if 'a' in f:
					ret.append(f['a'])
		# cleanup
		os.remove('z3950.cfg')		
		os.remove('rec.bin')
	except:
		print(ident + ' mdt "' + ' " Z39.50 error.')
	return ret

def MarcXML(xml):
	handler = marcxml.XmlHandler()
	marcxml.parse_xml(StringIO.StringIO(tostring(xml, encoding='utf-8')), handler)
	return handler.records[0]

def valid_date(s):
	try:
		return datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
	except:
		raise argparse.ArgumentTypeError('Invalid date format.')

def valid_display(s):
	if s in ('ident', 'marc'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid display format.')

def valid_request(s):
	if s in ('record', 'ident', 'set', 'meta'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid request format.')

# ARG -------------------

parser = argparse.ArgumentParser(description="OAI PMH 2.0 MARCXML Validator.")
listing = parser.add_argument_group('request')
listing.add_argument('--get', help='Request type. [record] [ident] [set] [meta]', type=valid_request, default='record')
required = parser.add_argument_group('validation')
required.add_argument('--set', help='Records set.')
required.add_argument('--from', help='Records from. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='from_date')
required.add_argument('--until', help='Records until. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='until_date')
optional = parser.add_argument_group('output')
optional.add_argument('--check', help='Validation control.', action='store_true')
args = parser.parse_args()

if args.get == 'record' or args.get == 'ident':
	if not args.set:
		parser.error('argument --set is required.')
	if not args.from_date:
		parser.error('argument --from is required.')
	if not args.until_date:
		parser.error('argument --until is required.')

if args.get == 'ident':
	if args.check or args.notify or args.export:
		parser.error('Invalid optional argument.')
	if args.display and args.display != 'ident':
		parser.error('Invalid display argument.')

# INIT -------------------

try:
	log = open(OUT, 'w')
except:
	print("Failed to open log file.")
	sys.exit(1)

registry = MetadataRegistry()
registry.registerReader('marc21', MarcXML)

oai = Client(URL, registry)

try:
	if args.get == 'record':
		records = oai.listRecords(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'ident':
		records = oai.listIdentifiers(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'set':
		records = oai.listSets()
	if args.get == 'meta':
		records = oai.listMetadataFormats()
except:
	records=[]

# MAIN -------------------

for record in records:

	if args.get == 'set' or args.get == 'meta':
		print(record[0])
		COUNTER+=1
		continue

	if args.get == 'ident':
		if record.isDeleted(): continue
		COUNTER+=1
		continue

	header = record[0]
	metadata = record[1]

	# skip deleted records
	if header.isDeleted(): continue

	# retry missing metadata(?)
	if not metadata:
		print(header.identifier() + ' Missing matadata. Retrying..')
		retry = oai.getRecord(metadataPrefix='marc21', identifier=header.identifier())
		if not retry[1]:
			print(header.identifier() + ' Missing retry metadata.')
			continue
		else:
			header = retry[0]
			metadata = retry[1]

	# VALIDATION ------------------

	if args.check:
		
		# SKIP OLD ------------------

		if int(re.sub('^.*-(\d+)$', '\\1', header.identifier())) < 2350000: continue

		# SKIP BOT ------------------

		#BOT=False
		#for F in metadata.get_fields('CAT','KAT')[-1:]:# last CAT/KAT
		#	if 'a' in F:
		#		if re.match('BATCH', F['a']): BOT=True
		#if BOT: continue

		# SKIP NOT NEW ------------------
		#OUTDATE = False
		#for F in metadata.get_fields('CAT','KAT')[:1]:# first CAT/KAT
		#	if 'c' in F:
		#		CAT_DATE = date(int(F['c'][:4]), int(F['c'][4:6]), int(F['c'][6:]))
		#		if CAT_DATE >= date.today().replace(day=1): OUTDATE=True# last day of month
		#		if CAT_DATE < date.today().replace(day=1,month=(date.today().month - 1)): OUTDATE=True# fist day of month 
		#if OUTDATE: continue
		# 1xx/6xx-653/700/710/711/730 ------------------

		if 'SIF' in metadata:
			if 'a' in metadata['SIF']: SIF = metadata['SIF']['a'].encode('utf-8')
		else:
			SIF = ''

		TOTAL+=1
		
		aleph = re.sub('^.*-(\d+)$', '\\1', header.identifier())

		BASE=True
		for B in metadata.get_fields('964'):
			if B.value() not in ('B12', 'B45', 'INT', 'SMZ'): BASE=False
		if BASE:
			MDT = [F['a'] for F in metadata.get_fields('080','089') if 'a' in F]
			MDF = [F for F in metadata.get_fields('650','655') if 'a' in F and '7' in F]
			SKIP=False
			if len(MDT) != len(MDF):
				log.write(aleph + ';080;' + SIF + ';176;Nesoulad počtu polí 080 a 650/655.\n')
				SKIP=True
				MDT_CNT+=1
			for F in MDF:
				ret = get_mdt(F['a'], F['7'], F.tag, aleph, SIF)
				if not SKIP:
					if not ret:
						log.write(aleph + ';' + F.tag + ';' + SIF + ';177;Neznamé MDF ' + F['7'] + '.\n')
						ERROR+=1
					elif MDT[MDF.index(F)] not in ret:
						log.write(aleph + ';' + F.tag + ';' + SIF + ';178;Hodnota MDF není v AUT ' + F['7'] + '.\n')
						MDT_ERR+=1

log.close()

print('------------------')
print(TOTAL)
print(MDT_CNT)
print(MDF_CNT)
print(MDT_ERR)
print(ERROR)

# EXIT -------------------

