#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# OAI-PMH 2.0 MARCXML Record validator.
#

# INCLUDE -------------------

from __future__ import print_function

import argparse,StringIO,urllib2,smtplib,sys,os,re

from email.mime.text import MIMEText
from datetime import datetime
from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry
from pymarc import marcxml
from lxml.etree import tostring

# VAR -------------------

URL='https://aleph.lib.cas.cz/OAI'
LOG='oai-test.html'
CSV='oai-test.csv'

ERROR={}

HTML_HEADER='''<!doctype html>
<html>
<head><meta charset="utf-8"></head>
<body style="background-color:black;color:#6DAE42;">
<br>[ <a href="CSVPLACEHOLDER" style="color:white; text-decoration:none;">CSV</a> ]
<br>
'''

HTML_FOOTER='''</body>
</html>
'''

COUNTER=0
MATCH=0

# DEF -------------------

def MarcXML(xml):
	handler = marcxml.XmlHandler()
	marcxml.parse_xml(StringIO.StringIO(tostring(xml, encoding='utf-8')), handler)
	return handler.records[0]

def valid_date(s):
	try:
		return datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
	except:
		raise argparse.ArgumentTypeError('Invalid date format.')

def valid_display(s):
	if s in ('ident', 'marc'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid display format.')

def valid_request(s):
	if s in ('record', 'ident', 'set', 'meta'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid request format.')

def url_response(url):
	try:
		req = urllib2.Request(url)
		req.add_header('User-Agent', 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:70.0) Gecko/20100101 Firefox/70.0')
		if urllib2.urlopen(req, timeout=10).getcode() == 200: return 1
	except: pass
	return 0

def write_error(id,tag,sif,code,code_text):
	aleph = re.sub('^.*-(\d+)$', '\\1', id)
	SIF = sif.decode('utf-8').lower()
	# error counter
	global MATCH
	MATCH+=1
	# update errors
	if SIF not in ERROR: ERROR[SIF] = {}
	if aleph not in ERROR[SIF]: ERROR[SIF][aleph] = []
	ERROR[SIF][aleph].append((code,code_text))
	# write daily HTML
	log.write(
		'<p><a style="color:#6DAE42;" target="_blank" href="https://aleph22.lib.cas.cz/F/?func=direct&doc_number=' +
		aleph+ '&local_base=AV">' + aleph + '</a>' + '{}'.format(' [<font color="gold">' + sif + '</font>]' if sif else '') +
		' [<font color="gold">' + code + '</font>] <font color="white">' + code_text + '</font></p>\n'
	)
	# write daily CSV
	csv.write(aleph + ';' + sif + ';' + code + ';' + code_text + '\n')

# ARG -------------------

parser = argparse.ArgumentParser(description="OAI PMH 2.0 MARCXML Validator.")
listing = parser.add_argument_group('request')
listing.add_argument('--get', help='Request type. [record] [ident] [set] [meta]', type=valid_request, default='record')
required = parser.add_argument_group('validation')
required.add_argument('--set', help='Records set.')
required.add_argument('--from', help='Records from. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='from_date')
required.add_argument('--until', help='Records until. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='until_date')
optional = parser.add_argument_group('output')
optional.add_argument('--check', help='Validation control.', action='store_true')
args = parser.parse_args()

if args.get == 'record' or args.get == 'ident':
	if not args.set:
		parser.error('argument --set is required.')
	if not args.from_date:
		parser.error('argument --from is required.')
	if not args.until_date:
		parser.error('argument --until is required.')

if args.get == 'ident':
	if args.check or args.notify or args.export:
		parser.error('Invalid optional argument.')
	if args.display and args.display != 'ident':
		parser.error('Invalid display argument.')

# INIT -------------------

try:
	log = open(LOG, 'w', 0)
	log.write(HTML_HEADER)
except:
	print('LOG: Read only FS exiting..')
	exit(1)
try:
	csv = open(CSV, 'w', 0)
except:
	print('CSV: Read only FS exiting..')
	exit(1)

registry = MetadataRegistry()
registry.registerReader('marc21', MarcXML)

oai = Client(URL, registry)

try:
	if args.get == 'record':
		records = oai.listRecords(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'ident':
		records = oai.listIdentifiers(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'set':
		records = oai.listSets()
	if args.get == 'meta':
		records = oai.listMetadataFormats()
except:
	log.write('<p><font color="white">Žádný záznam.</font></p>')
	records=[]

# MAIN -------------------

for record in records:

	if args.get == 'set' or args.get == 'meta':
		print(record[0])
		COUNTER+=1
		continue

	if args.get == 'ident':
		if record.isDeleted(): continue
		COUNTER+=1
		continue

	header = record[0]
	metadata = record[1]

	# skip deleted records
	if header.isDeleted(): continue

	# retry missing metadata(?)
	if not metadata:
		print(header.identifier() + ' Missing matadata. Retrying..')
		retry = oai.getRecord(metadataPrefix='marc21', identifier=header.identifier())
		if not retry[1]:
			print(header.identifier() + ' Missing retry metadata.')
			continue
		else:
			header = retry[0]
			metadata = retry[1]

	# VALIDATION ------------------

	if args.check:
		
		# SKIP OLD ------------------

		if int(re.sub('^.*-(\d+)$', '\\1', header.identifier())) < 2350000: continue

		# SKIP BOT ------------------

		#BOT=False
		#for F in metadata.get_fields('CAT','KAT')[-1:]:# last CAT/KAT
		#	if 'a' in F:
		#		if re.match('BATCH', F['a']): BOT=True
		#if BOT: continue

		# TEST ------------------

		if 'SIF' in metadata:
                        if 'a' in metadata['SIF']: SIF = metadata['SIF']['a'].encode('utf-8')
                else:
                        SIF = ''

		#008 -> rule 103
		#
		# repeatable: 015, 020, 035, 505, 787
		#             020q, 787k, 787x, 787z, 260a, 260b, 264a, 264b

		# CNB
		CNB=True
		if '008' in metadata:
			if metadata['008'].value()[15:18].strip() != 'xr': CNB=False
		if '044' in metadata:
			if 'xr' not in metadata['044'].value(): CNB=False
		if metadata.leader:
			if metadata.leader[7] != 'm': CNB=False
		if '506' in metadata:
			if re.match(u'^Bez čísla ČNB.*', metadata['506'].value()): CNB=False
		if CNB:
			if '015' not in metadata:
				write_error(header.identifier(), '506', SIF, '132', 'Chybí číslo ČNB.')
		# CNB format
		for F in metadata.get_fields('015'):
			if not re.match('^cnb\d{9}$', F.value()):
				write_error(header.identifier(), '015', SIF, '133', 'Chybný tvar čísla ČNB.')
		#ISBN
		ISBN=True
		if metadata.leader:
			if metadata.leader[7] != 'm': ISBN=False
		if '008' in metadata:
			if metadata['008'].value()[7:11].isdigit():
				if int(metadata['008'].value()[7:11]) < 1989: ISBN=False
		if '506' in metadata:
			if re.match('.*ISBN.*', metadata['506'].value()): ISBN=False
		if ISBN:
			if '020' not in metadata:
				write_error(header.identifier(), '020', SIF, '134', 'Chybí ISBN.')
		#ISBN format
		for F in metadata.get_fields('020'):
			for I in F.get_subfields('a'):
				ISBN=False
				if re.match('^[0-9X]{10}$', I.replace('-','')): ISBN=True
				if re.match('^[0-9X]{13}$', I.replace('-','')): ISBN=True
				if not ISBN:
					write_error(header.identifier(), '020', SIF, '135', 'Chybný tvar ISBN.')
		# 020q
		for F in metadata.get_fields('020'):
			INT = F.get_subfields('q')
			if INT:
				if not (re.match('^\(.*', INT[0]) and re.match('.*\)$', INT[-1])):
					write_error(header.identifier(), '020', SIF, '136', 'Chybná interpunkce v poli 020q.')
				if len(INT) >= 2:
					for I in INT[:-1]:
						if not re.match('.*;$', I):
							write_error(header.identifier(), '020', SIF, '136', 'Chybná interpunkce v poli 020q.')
		# 020	
		for F in metadata.get_fields('020'):
			for SUB in F.subfields[0::2]:
				if SUB not in ('a', 'q', 'z'):
					write_error(header.identifier(), '020', SIF, '137', 'Chybný kód podpole v poli 020.')
		# 035
		if '035' in metadata:
			BASE=False
			for F in metadata.get_fields('964'):
				if F.value() in ('B70', 'B80', 'B97', 'CLE', 'ECS', 'ECR', 'RET'): BASE=True
			if not BASE:
				write_error(header.identifier(), '035', SIF, '138', 'Chybné označení báze v 964.')
		for F in metadata.get_fields('964'):
			if F.value() in ('B70', 'B80', 'B97', 'CLE', 'ECS', 'ECR', 'RET'):
				if '035' not in metadata:
					write_error(header.identifier(), '035', SIF, '139', 'Chybí pole 035.')
		# 035a
		BASE=False
		SUB = metadata.get_fields('035')
		if SUB:
			if len(SUB) != 2:
				BASE=True
			else:
				if re.sub('.*ISIS-(.*)-MFN.*', '\\1', SUB[0].value()) not in ('B70', 'B80', 'B97', 'CLE', 'ECS', 'ECR', 'RET'): BASE=True
				if re.sub('.*ISIS-(.*)-ID.*', '\\1', SUB[1].value()) not in ('B70', 'B80', 'B97', 'CLE', 'ECS', 'ECR', 'RET'): BASE=True
			if BASE:
				write_error(header.identifier(), '035', SIF, '140', 'Chybná hodnota v 035a.')
		# 100c
		if '100' in metadata:
			if 'c' in metadata['100']:
				if re.match('^\[.*\]$', metadata['100']['c']):
					C = re.sub('^\[(.*)\]$', '\\1', metadata['100']['c'])
					if C not in [F['t'] for F in metadata.get_fields('773') if 't' in F]:
						write_error(header.identifier(), '100', SIF, '141', 'Nesoulad názvu zdrojového dokumentu 100c/773t.')
		# 110c
		if '110' in metadata:
			if metadata['110'].indicator1 == 0:
				if not ('c' in metadata['110'] and re.match('^\[.*', metadata['110']['c'])):
					write_error(header.identifier(), '110', SIF, '142', 'Chybný zápis podpole 110c.')
		# 110b
		if '110' in metadata:
			if metadata['110'].indicator1 == 1:
				if not 'b' in metadata['110']:
					write_error(header.identifier(), '110', SIF, '143', 'Chybí podpole 110b.')
		# 710c
		if '710' in metadata:
			if metadata['710'].indicator1 == 0:
				if not ('c' in metadata['710'] and re.match('^\[.*', metadata['710']['c'])):
					write_error(header.identifier(), '710', SIF, '144', 'Chybný zápis podpole 710c.')
		# 710b
		if '710' in metadata:
			if metadata['710'].indicator1 == 1:
				if not 'b' in metadata['710']:
					write_error(header.identifier(), '710', SIF, '145', 'Chybí podpole 710b.')
		# 245c
		if '254' in metadata:
			if 'c' in metadata['245']:
				if ';' in metadata['245']['c']:
					if not re.match('.*(?<! ) ; (?! ).*', metadata['245']['c']):
						write_error(header.identifier(), '245', SIF, '146', 'Chybný zápis ; v 245c.')
		# 505r
		for F in metadata.get_fields('505'):
			if 'r' in F:
				if ';' in F['r']:
					if not re.match('.*(?<! ) ; (?! ).*', F['r']):
						write_error(header.identifier(), '505', SIF, '147', 'Chybný zápis středníku v 505r.')
		# 787n
		for F in metadata.get_fields('787'):
			if 'n' in F:
				if ';' in F['n']:
					if not re.match('.*(?<! ) ; (?! ).*', F['n']):
						write_error(header.identifier(), '787', SIF, '148', 'Chybný zápis středníku v 787n.')
		# 787k
		for F in metadata.get_fields('787'):
			for SUB in F.get_subfields('k'):
				if ';' in SUB:
					if not re.match('.*(?<! ) ; (?! ).*', SUB):
						write_error(header.identifier(), '787', SIF, '149', 'Chybný zápis středníku v 787k.')
		# 773n
		if '773' in metadata:
			if 'n' in metadata['773']:
				if ';' in metadata['773']['n']:
					if not re.match('.*(?<! ) ; (?! ).*', metadata['773']['n']):
						write_error(header.identifier(), '773', SIF, '150', 'Chybný zápis středníku v 773n.')
		# 245c
		if '245' in metadata:
			if 'c' in metadata['245']:
				if re.match('.*\[ =.*', metadata['245']['c']):
					write_error(header.identifier(), '245', SIF, '151', 'Chybná interpunkce v 245c. Mezi [ a = je mezera.')
		# 505r
		for F in metadata.get_fields('505'):
			if 'r' in F:
				if re.match('.*\[ =.*', F['r']):
					write_error(header.identifier(), '505', SIF, '152', 'Chybná interpunkce v 505r. mezi [ a = je mezera.')
		# 505r
		for F in metadata.get_fields('505'):
			if 'r' in F:
				if len(re.findall('\[', F['r'])) != len(re.findall('\]', F['r'])):
					write_error(header.identifier(), '505', SIF, '153', 'Odlišný počet [ a ] v poli 505r.')
		# 245c
		if '245' in metadata:
			if 'c' in metadata['245']:
				if len(re.findall('\[', metadata['245']['c'])) != len(re.findall('\]', metadata['245']['c'])):
					write_error(header.identifier(), '245', SIF, '154', 'Odlišný počet [ a ] v poli 245c.')
		# 245
		if '245' in metadata:
			if metadata['245'].indicator1 == 0:
				if '700' not in metadata and '500' in metadata:
					if metadata['500'].value() != 'Nepodepsáno.':
						write_error(header.identifier(), '245', SIF, '155', 'Chybný 1. indikátor pole 245c.')
		# 245c
		GER=False
		if '008' in metadata:
				if metadata['008'].value()[35:39] == 'ger': GER=True
		if '041' in metadata:
				if 'ger' in metadata['041'].value(): GER=True
		if not GER:
			if '245' in metadata:
				if 'c' in metadata['245']:
					if re.match('.*; [A-Z].*', metadata['245']['c']):
						write_error(header.identifier(), '245', SIF, '156', 'Chyba v poli 245c po středníku následuje velké písmeno.')
		# 245c
		if '245' in metadata:
			if metadata['245'].indicator1 == 0:
				if 'c' in metadata['245']:
					if re.match('^[A-Z].*', metadata['245']['c']):
						for S in ('ed.', 'edd.', 'eds.', 'hg.'):
							if S not in metadata['245']['c'].lower():
								write_error(header.identifier(), '245', SIF, '157', 'Chyba v 245c 1. indikátor je 0, pole začíná velkým písmenem.')
		# 245b
		if '245' in metadata:
			if 'b' in metadata['245']:
				if re.match('^\(.*', metadata['245']['b']):
					write_error(header.identifier(), '245', SIF, '158', 'Chyba podpole 245b začíná na (.')
		# 245 
		#if '245' in metadata:
		#	if 'a' in metadata['245']:
		#		if re.match('.*(\D[1-9]\D|\D[1][0-9]\D|\D20\D).*', metadata['245']['a']):
		#			write_error(header.identifier(), '245', SIF, '159', 'Chyba v poli 245a, označení části je třeba zapsat do pole 245n.')
		#	if 'b' in metadata['245']:
		#		if re.match('.*(\D[1-9]\D|\D[1][0-9]\D|\D20\D).*', metadata['245']['b']):
		#			write_error(header.identifier(), '245', SIF, '160', 'Chyba v poli 245b, označení části je třeba zapsat do pole 245n.')
		# 245
		if '245' in metadata:
			if not re.match('.*[MDCLVI]\. :.*', metadata['245'].value()):
				if re.match('.*(?<!\.\.)\. :.*', metadata['245'].value()):
					write_error(header.identifier(), '245', SIF, '161', 'Nepovolená kombinace . : v poli 245.')
		# 245c
		if '245' in metadata:
			if 'c' in metadata['245']:
				if metadata['245'].indicator1 == 1 and re.match('^[a-z].*', metadata['245']['c']):
					write_error(header.identifier(), '245', SIF, '162', 'Chybný zápis 245c, 1. indikátor 1, začíná na malé písmeno.')
		# 245
		if '245' in metadata:
			if metadata['245'].indicator1 == 1:
				if not 'c' in metadata['245']:
					write_error(header.identifier(), '245', SIF, '163', 'Chybná hodnota 1. indikátoru, chybí podpole "c".')
		# 245c
		if '245' in metadata:
			if 'c' in metadata['245']:
				if not (len(re.findall('[\[\]]', metadata['245']['c'])) == 2 and re.match('^\[.*\]$', metadata['245']['c'])):
					for S in re.findall('\[.*?\]', metadata['245']['c']):
						if re.match('\[=.*\]', S) and ',' not in S:
							write_error(header.identifier(), '245', SIF, '164', 'Chybný zápis dešifrovaného jména v 245c.')
		# 505r
		for F in metadata.get_fields('505'):
			if 'r' in F:
				if not (len(re.findall('[\[\]]', F['r'])) == 2 and re.match('^\[.*\]$', F['r'])):
					for S in re.findall('\[.*?\]', F['r']):
						if re.match('\[=.*\]', S) and ',' not in S:
							write_error(header.identifier(), '505', SIF, '165', 'Chybný zápis dešifrovaného jména v 505r.')
		# 245c			
		if '245' in metadata:
			if 'c' in metadata['245']:
				if re.match('.*s\. [0-9]+.*', metadata['245']['c']):
					write_error(header.identifier(), '245', SIF, '166', 'Nenáležitý zápis stran v 245c.')
		# 264a
		if '264' in metadata:
			SUB = metadata['264'].subfields[0::2]
			for F in SUB:
				if F == 'a' and SUB.index(F) != 0:
					if not re.match('.*;$', metadata['264'].subfields[1::2][SUB.index(F) - 1]):
						write_error(header.identifier(), '264', SIF, '167', "Chybná interpunkce před podpolem 'a' (má být středník).")
		# 260a
		if '260' in metadata:
			SUB = metadata['260'].subfields[0::2]
			for F in SUB:
				if F == 'a' and SUB.index(F) != 0:
					if not re.match('.*;$', metadata['260'].subfields[1::2][SUB.index(F) - 1]):
						write_error(header.identifier(), '260', SIF, '168', "Chybná interpunkce před podpolem 'a' (má být středník).")
		# 264b
		if '264' in metadata:
			SUB = metadata['264'].subfields[0::2]
			for F in SUB:
				if F == 'b' and SUB.index(F) == 0:
					write_error(header.identifier(), '264', SIF, '169', "Chybná interpunce před podpolem 'b' (má být dvojtečka).")
				if F == 'b' and SUB.index(F) != 0:
					if not re.match('.*:$', metadata['264'].subfields[1::2][SUB.index(F) - 1]):
						write_error(header.identifier(), '264', SIF, '169', "Chybná interpunce před podpolem 'b' (má být dvojtečka).")
		# 260b
		if '260' in metadata:
			SUB = metadata['260'].subfields[0::2]
			for F in SUB:
				if F == 'b' and SUB.index(F) == 0:
					write_error(header.identifier(), '260', SIF, '170', "Chybná interpunce před podpolem 'b' (má být dvojtečka).")
				if F == 'b' and SUB.index(F) != 0:
					if not re.match('.*:$', metadata['260'].subfields[1::2][SUB.index(F) - 1]):
						write_error(header.identifier(), '260', SIF, '170', "Chybná interpunce před podpolem 'b' (má být dvojtečka).")
		# 300e
		E=False
		for F in metadata.get_fields('300'):
			if 'e' in F: E=True
		if E:
			if not 'INT' in [F.value() for F in metadata.get_fields('964')]:
				write_error(header.identifier(), '300', SIF, '171', 'Chybný zápis pole 300 (nebo v 964 chybí kód INT).')
		# 490
		if '490' in metadata:
			SUB = metadata['490'].subfields[0::2]
			for F in SUB:
				if F == 'a' and SUB.index(F) != 0:
					if SUB[SUB.index(F) - 1] == 'v':
						if not re.match('.*\.$', metadata['490'].subfields[1::2][SUB.index(F) - 1]):
							write_error(header.identifier(), '490', SIF, '172', "Chybné oddělení opakovaného podpole 'a' (má být tečka).")
		# 490
		if '490' in metadata:
			SUB = metadata['490'].subfields[0::2]
			for F in SUB:
				if F == 'a' and SUB.index(F) != 0:
					if SUB[SUB.index(F) - 1] == 'a':
						if not re.match('.*=$', metadata['490'].subfields[1::2][SUB.index(F) - 1]):
							write_error(header.identifier(), '490', SIF, '173', "Chybné oddělení opakovaného podpole 'a' (má být rovnítko).")
		# 245c / 505r generic
		if '245' in metadata:
			if 'c' in metadata['245']:
				if re.match('.*,[^ ].*', metadata['245']['c']):
					write_error(header.identifier(), '245', SIF, '174', 'Chybí mezera za čárkou v podpoli 245c.')
		for F in metadata.get_fields('505'):
			if 'r' in F:
				if re.match('.*,[^ ].*', F['r']):
					write_error(header.identifier(), '505', SIF, '174', 'Chybí mezera za čárkou v podpoli 505r.')
		# 245c / 505r generic
		if '245' in metadata:
			if 'c' in metadata['245']:
				if re.match('.*[^0-9\[ ]=.*', metadata['245']['c']):
					write_error(header.identifier(), '245', SIF, '175', 'Chybný znak před znakem = v podpoli 245c.')
		for F in metadata.get_fields('505'):
			if 'r' in F:
				if re.match('.*[^0-9\[ ]=.*', F['r']):
					write_error(header.identifier(), '505', SIF, '175', 'Chybný znak před znakem = v podpoli 505r.')
	
	COUNTER+=1

# EXIT -------------------

print('TOTAL ' + str(COUNTER))

if args.check:
	print('MATCH ' + str(MATCH))
	if records and MATCH == 0: log.write('<p><font color="white">Žádný záznam.</font></p>')

log.write(HTML_FOOTER)
log.close()
csv.close()

