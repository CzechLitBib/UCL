#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# OAI-PMH 2.0 MARCXML subfield '7' control.
#

# INCLUDE -------------------

from __future__ import print_function

import argparse,StringIO,sys,os,re

from datetime import datetime,timedelta
from oaipmh.client import Client
from oaipmh.metadata import MetadataRegistry
from pymarc import marcxml
from lxml.etree import tostring

# VAR -------------------

URL='https://aleph.lib.cas.cz/OAI'

#LAST_MONTH=(datetime.today()-timedelta(days=1)).strftime('%y%m')
#LAST_MONTH_DIR=(datetime.today()-timedelta(days=1)).strftime('%Y/%m')

LAST_MONTH='2008'
LAST_MONTH_DIR='2020/08'

OUT_DATA='/var/www/html/kat/' + LAST_MONTH_DIR + '/data/'
OUT_INDEX='/var/www/html/kat/' + LAST_MONTH_DIR + '/index.html'

SIF_MAP={
'AG':'UCLAG',
'DM':'UCLDM',
'DAN':'UCLDR',
'FAP':'UCLFP',
'GR':'UCLGR',
'NÚS':'UCLJF',
'JCH':'UCLJCH',
'JHK':'UCLJK',
'JS':'UCLJS',
'KB':'UCLKB',
'LS':'UCLLS',
'LUV':'UCLLUV',
'MF':'UCLMF',
'IM':'UCLMI',
'MAK':'UCLMK',
'SKU':'UCLMS',
'PHA':'UCLPH',
'PET':'UCLPL',
'PAV':'UCLPN',
'PV':'UCLPV',
'RC':'UCLRC',
'RE':'UCLRE',
'SRA':'UCLST',
'TP':'UCLTP',
'VM':'UCLVM'
}

DATA={}

# initialize struct
other={}
for key in SIF_MAP.keys(): other[key] = 0
# initialize data
for key in SIF_MAP.keys(): DATA[key] = {'sif_count':0, 'cat_count':0, 'sif_cat_count':0, 'other':other.copy(), 'cat_id':[]}

INDEX_TOP='''<!doctype html>
<html>
<head><meta charset="utf-8"></head>
<body style="background-color:black;color:#6DAE42;">
<br>
<b><u>OAI-PMH 2.0 MARCXML</u></b>
<br><br><font size="3" color="white">Výstup kontroly pole CAT/KAT záznamů MARCXML.</font>
<br><br>
<table border="1" cellpadding="8px" style="border-collapse:collapse;">
<tr>
<td width="30" bgcolor="#333333;" align="center"></td>
<td width="30" bgcolor="#333333;" align="center"><font color="gold">SIF</font></td>
<td width="30" bgcolor="#333333;" align="center"><font color="gold">KAT</font></td>
<td width="30" bgcolor="#333333;" align="center"><font color="gold">SIF+KAT</font></td>
'''

# initialize header
for key in SIF_MAP.keys():
	INDEX_TOP+='<td width="30" bgcolor="#333333;" align="center"><font color="gold">' + key + '</font></td>'

INDEX_TOP+='<td width="30" bgcolor="#333333;" align="center"><font color="gold">ID</font></td></tr>'

INDEX_FOOTER='''</tr></table><br></br>'''

HTML_TOP='''<!doctype html>
<html>
<head><meta charset="utf-8"></head>
<body style="background-color:black;color:#6DAE42;">
<br>
'''
HTML_BOTTOM='<br></body></html>'

# DEF -------------------

def MarcXML(xml):
	handler = marcxml.XmlHandler()
	marcxml.parse_xml(StringIO.StringIO(tostring(xml, encoding='utf-8')), handler)
	return handler.records[0]

def valid_date(s):
	try:
		return datetime.strptime(s, '%Y-%m-%d %H:%M:%S')
	except:
		raise argparse.ArgumentTypeError('Invalid date format.')

def valid_display(s):
	if s in ('ident', 'marc'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid display format.')

def valid_request(s):
	if s in ('record', 'ident', 'set', 'meta'): return s
	else:
		raise argparse.ArgumentTypeError('Invalid request format.')

def get_catlist(metadata):
	catlist = metadata.get_fields('CAT','KAT')
	out = []
	for F in catlist:# remove all bots
		if 'a' in F and 'BATCH' not in F['a']:
			out.append(F['a'])
	return out
def get_key(val,lst):
	for sif,cat in lst.iteritems():
		if cat == val:
			return sif

# ARG -------------------

parser = argparse.ArgumentParser(description="OAI PMH 2.0 MARCXML Validator.")
listing = parser.add_argument_group('request')
listing.add_argument('--get', help='Request type. [record] [ident] [set] [meta]', type=valid_request, default='record')
required = parser.add_argument_group('validation')
required.add_argument('--set', help='Records set.')
required.add_argument('--from', help='Records from. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='from_date')
required.add_argument('--until', help='Records until. [YYYY-mm-dd HH:MM:SS]', type=valid_date, dest='until_date')
optional = parser.add_argument_group('output')
optional.add_argument('--check', help='Validation control.', action='store_true')
args = parser.parse_args()

if args.get == 'record' or args.get == 'ident':
	if not args.set:
		parser.error('argument --set is required.')
	if not args.from_date:
		parser.error('argument --from is required.')
	if not args.until_date:
		parser.error('argument --until is required.')

if args.get == 'ident':
	if args.check or args.notify or args.export:
		parser.error('Invalid optional argument.')
	if args.display and args.display != 'ident':
		parser.error('Invalid display argument.')

# INIT -------------------

registry = MetadataRegistry()
registry.registerReader('marc21', MarcXML)

oai = Client(URL, registry)

try:
	if args.get == 'record':
		records = oai.listRecords(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'ident':
		records = oai.listIdentifiers(metadataPrefix='marc21', set=args.set, from_=args.from_date, until=args.until_date)
	if args.get == 'set':
		records = oai.listSets()
	if args.get == 'meta':
		records = oai.listMetadataFormats()
except:
	records=[]

# MAIN -------------------

for record in records:

	if args.get == 'set' or args.get == 'meta':
		print(record[0])
		COUNTER+=1
		continue

	if args.get == 'ident':
		if record.isDeleted(): continue
		COUNTER+=1
		continue

	header = record[0]
	metadata = record[1]

	# skip deleted records
	if header.isDeleted(): continue

	# retry missing metadata(?)
	if not metadata:
		print(header.identifier() + ' Missing matadata. Retrying..')
		retry = oai.getRecord(metadataPrefix='marc21', identifier=header.identifier())
		if not retry[1]:
			print(header.identifier() + ' Missing retry metadata.')
			continue
		else:
			header = retry[0]
			metadata = retry[1]

	if args.check:

		ALEPH = re.sub('^.*-(\d+)$', '\\1', header.identifier()).encode('utf-8')

		SIF=''
		if 'SIF' in metadata:
			if 'a' in metadata['SIF']:
				SIF = metadata['SIF']['a'].upper().encode('utf-8')

		catlist = get_catlist(metadata)

		# SIF count
		if SIF in SIF_MAP.keys():
			DATA[SIF]['sif_count']+=1

		# KAT count	
		for cat in catlist:
			if cat in SIF_MAP.values():
				if SIF in SIF_MAP.keys():
					# SELF
					if SIF == get_key(cat,SIF_MAP):
						# KAT count
						DATA[SIF]['cat_count']+=1
						# SIF/KAT count
						DATA[SIF]['sif_cat_count']+=1
						# SIF ID
						if ALEPH not in DATA[SIF]['cat_id']:
							DATA[SIF]['cat_id'].append(ALEPH)
					# OTHER
					else:
						# KAT count
						DATA[get_key(cat,SIF_MAP)]['cat_count']+=1
						# OTHER count
						DATA[SIF]['other'][get_key(cat,SIF_MAP)]+=1
						# SIF ID
						if ALEPH not in DATA[get_key(cat,SIF_MAP)]['cat_id']:
							DATA[get_key(cat,SIF_MAP)]['cat_id'].append(ALEPH)
				else:
					# KAT count
					DATA[get_key(cat,SIF_MAP)]['cat_count']+=1
					# KAT ID
					if not ALEPH in DATA[get_key(cat,SIF_MAP)]['cat_id']:
						DATA[get_key(cat,SIF_MAP)]['cat_id'].append(ALEPH)

print('Data harvest done.')

ind = open(OUT_INDEX, 'a', 0)
ind.write(INDEX_TOP)

for SIF in SIF_MAP.keys():

	# write data
	html = open(OUT_DATA + SIF + '_kat.html', 'a')
	html.write(HTML_TOP)
	for aleph in DATA[SIF]['cat_id']:
		html.write('<p><a style="color:#6DAE42;" target="_blank" href="https://aleph22.lib.cas.cz/F/?func=direct&doc_number=' +
			aleph + '&local_base=AV">' + aleph + '</a></p>\n'
		)
	html.write(HTML_BOTTOM)
	html.close()

	# write index

	ind.write('<tr>' + '\n')
	ind.write('<td width="30" align="center"><font color="gold">' + SIF + '</font></td>' + '\n')
	ind.write('<td width="30" align="center">' + str(DATA[SIF]['sif_count']) + '</td>\n')
	ind.write('<td width="30" align="center">' + str(DATA[SIF]['cat_count']) + '</td>\n')
	ind.write('<td width="30" align="center">' + str(DATA[SIF]['sif_cat_count']) + '</td>\n')

	for sif in SIF_MAP.keys():
		ind.write('<td width="30" align="center">' + str(DATA[SIF]['other'][sif]) + '</td>\n')
 
	ind.write('<td width="30" align="center"><a style="text-decoration:none;color:white;" href="data/' + SIF + '_kat.html">HTML</a></td>\n')

print('Data gen done.')

#EXIT 

ind.write(INDEX_FOOTER)
ind.close()

