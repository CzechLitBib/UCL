#!/usr/bin/python3
#
# Vufind - Export module
#

import requests,io

from flask import Flask,render_template,request,send_file,make_response
#from urllib.parse import urlparse,parse_qs


# VAR -------------------------

SOLR='http://localhost:8983/solr/biblio/select'

# INIT -------------------------

app = Flask(__name__)
session = requests.Session()

# DATABASE -------------------------

def query_solr(query):
	if query:
		req = session.get(SOLR + '?' + query)
		#	if req.status == 200:
			
# CONTENT -------------------------

def get_txt(data):
	return data

# ROUTING -------------------------

@app.route('/export', methods=['POST','GET'])
def index():
	print(request)
	print(request.get_data())
	print(request.args.get)
	print(request.args)
	print(request.data)
	print(request.query_string)
	print(request.full_path)
	#Q = request.args.get('lookfor')
	#FQ = request.args.getlist('filter[]')
	#print(parse_qs(urlparse(request.args.get('lookfor')).query))
	#print(parse_qs(urlparse(request.args.get('lbreferer')).query))

	# DEFAULT
	#headers = {'Content-Type': 'text/html'}
	#return make_response(render_template('/export.html'), 200, headers)

	# SOLR

	# EXPORT

	#print(request.form['format'])
	#headers = {'Content-Type': 'text/plain'}

	f = io.BytesIO(b'Boo!')

	response = make_response(send_file(f, as_attachment=True, attachment_filename='vufind.data'))
	#response.headers['Content-Type'] = 'text/plain'
	#response.headers['Content-Type'] = 'application/octet-stream'
	#response.headers['Content-Disposition'] = 'Content-Disposition: attachment; filename="vufind.data"'
	return response

	#return make_response(render_template('/deletes.txt'), 200, headers)
	#return make_response(render_template('/lkrs.txt'), 200, headers)
	#ident = request.args.get('identifier')
	#return abort(400, "Missing 'identifier' argument.")
	#return abort(400, "Invalid identifier: <000000000-999999999>.")
	#return XML_HEAD + data[prefix] + XML_FOOT
	#return data[prefix]
	#if request.headers.get('Accept') == 'application/marcxml': prefix='xml'
	#iso8601_from = request.args.get('from')
	#iso8601_until = request.args.get('until')
	#return abort(400, "Invalid 'from' argument: <iso8601_datetime>.")
	#return abort(400, "Invalid 'until' argument: <iso8601_datetime>.")
	#return '[' + ','.join([row[prefix] for row in data]) + ']'
	#return abort(400, "Invalid 'from' argument: <iso8601_datetime>.")
	#return abort(400, "Invalid 'until' argument: <iso8601_datetime>.")
	#return json.dumps([row['ident'] for row in data])

# MAIN -------------------------

if __name__ == '__main__':
	app.config['TEMPLATES_AUTO_RELOAD'] = True
	app.run(debug=False, port=9000)

